# Define the base formula for controls
base_formula <- reformulate(control_vars, response = outcome_var)
# Define groups to run models for
groups <- list(
pooled = data,
below_median = data[below_median == TRUE],
above_median = data[below_median == FALSE]
)
# Run models for each group
for (group_name in names(groups)) {
# Add 'treated' term to the formula
formula_with_treatment <- update(base_formula, . ~ . + treated)
models[[paste0("pooled_", group_name)]] <- feols(formula_with_treatment, data = groups[[group_name]],
vcov = if (heteroscedastic) "hetero" else NULL)
# Run regression by arm for the same group
formula_with_group <- update(base_formula, . ~ . + i(group, ref = "Control"))
models[[paste0("by_arm_", group_name)]] <- feols(formula_with_group, data = groups[[group_name]],
vcov = if (heteroscedastic) "hetero" else NULL)
}
return(models)
}
# list of controls
controls <- c(
"l_taxpayer_mean_monthly_tot_paid",
"taxregion_mean_monthly_tot_paid",
"always_filer_2023",
"zero_filer_2023",
"tot_obligation_began_2023")
# Function for regressions LATE IV
run_regression_iv <- function(outcome_var, data = matched_data, control_vars = controls, vcov_type = "hetero") {
# Base formula for the fixed effects and controls
base_formula <- paste(outcome_var, "~", paste(control_vars, collapse = " + "))
# Instruments and their respective labels
instruments <- c("treated ~ sms_delivery", "basic ~ sms_delivery", "anchor ~ sms_delivery")
labels <- c("pooled", "basic", "anchor")
# Initialize a list to store models
models <- list()
# Define groups to run models for each instrument
groups <- list(all = data, below_median = data[below_median == TRUE], above_median = data[below_median == FALSE])
matched_data[,
":="(
reminder_delivery = (reminder == 1 & sms_delivery == TRUE),
anchor_delivery   = (anchor == 1 & sms_delivery == TRUE)
)
]
# Loop through each instrument and group
for (inst in instruments) {
for (grp in names(groups)) {
formula_iv <- as.formula(paste(base_formula, "|", inst))
model_key <- paste(sub(" ~ .*", "", inst), grp, sep = "_")
models[[model_key]] <- feols(formula_iv, data = matched_data, vcov = "hetero")
}
return(models)
}
# Function to extract coefficients, ses, and p-values
extract_fixest_results <- function(model_list, coefficient_name, coefficient_to_avoid = "") {
result_list <- lapply(model_list, function(model) {
# Define the names of coefficients to exclude
exclude_coef <- c("(Intercept)", "l_taxpayer_mean_monthly_tot_paid",
"taxregion_mean_monthly_tot_paid", "always_filer_2023",
"zero_filer_2023", "tot_obligation_began_2023", coefficient_to_avoid)
# Extract coefficients, standard errors, and p-values using broom::tidy
model_tidy <- broom::tidy(model)
# Round coefficients and p-values
model_tidy <- model_tidy %>%
mutate(
Coefficient = coefficient_name,
estimate = round(estimate, 3),
std.error = paste0("(", round(std.error, 2), ")"),
p.value = round(p.value, 3)
)
# Filter out the excluded coefficients
model_filtered <- model_tidy %>%
filter(!term %in% exclude_coef)
# Extract the filtered coefficients, standard errors, and p-values
coef_filtered <- model_filtered$estimate
se_filtered <- model_filtered$std.error
pvalues_filtered <- model_filtered$p.value
tbl <- data.table(
Coefficient = coefficient_name,
Estimate = coef_filtered,
Std.Error = se_filtered,
P.Value = pvalues_filtered
)
# Add asterisks based on p-values
tbl[, Significance := fcase(
P.Value <= 0.01, "***",
P.Value <= 0.05, "**",
P.Value <= 0.1 , "*",
default = ""
)]
tbl[, Estimate := paste0(Estimate, Significance)]
tbl[, Significance := NULL]  # Remove temporary column
return(tbl)
})
result_table <- rbindlist(result_list, idcol = "Model")
return(result_table)
}
# Create a custom function to format the table for LaTeX
format_results_for_latex <- function(result_table) {
# Create a new formatted_table
formatted_table <- result_table[, {
# Create a list of labels
labels <- c("\\scriptsize $\\hat{\\beta}$", "\\scriptsize{\\textit{se}}", "\\scriptsize{\\textit{p-value}}")
# Create a list for each row containing the label and the corresponding value
# Ensuring that each value aligns with the right label
list(
Row = rep(labels, each = 1),  # Repeat each label once
Value = as.character(c(Estimate, Std.Error, P.Value))  # Convert to character to ensure uniformity
)
}, by = .(Model, Coefficient)]
formatted_table_wide <- formatted_table %>%
pivot_wider(names_from = Model, values_from = Value, values_fn = list(Value = first))
return(formatted_table_wide)
}
# Function to perform t-tests
t_test <- function(x, y, model_results_1, model_results_2) {
coef1 <- coef(model_results_1)[[x]]
coef2 <- coef(model_results_2)[[y]]
se1 <- sqrt(model_results_1[["se"]][[x]]^2)
se2 <- sqrt(model_results_2[["se"]][[y]]^2)
se_diff <- sqrt(se1^2 + se2^2)
# Difference in coefficients
diff_coef <- coef1 - coef2
# T-statistic
t_stat <- diff_coef / se_diff
# Degrees of freedom, often approximated as the smaller model's df
df <- min(degrees_freedom(model_results_1, type = "t"), degrees_freedom(model_results_2, type = "t"))
# P-value
p_value <- sprintf("%0.3f", round(2 * pt(-abs(t_stat), df), 3))
return(p_value)
}
# Function to extract p-values from t-tests
perform_t_test <- function(model1, model2, term1, term2) {
t_test_result <- t_test(term1, term2, model1, model2)
sprintf("& \\multicolumn{1}{c}{%s}", t_test_result)
}
# Function to generate the kable output for a given table
generate_kable_output <- function(latex_table) {
kable_output <- latex_table %>%
kable("latex", booktabs = TRUE, escape = FALSE, linesep = "", align = "c") %>%
kable_styling(latex_options = "hold_position", full_width = FALSE) %>%
row_spec(0, bold = TRUE) %>%
row_spec(0, bold = TRUE)
# Convert the output to a single character vector split by newline
kable_output <- unlist(strsplit(as.character(kable_output), "\n"))
return(kable_output)
}
# 1. Load Data ----
{
matched_data <- fread(file.path(fin_data, "Experiment/matched_data_wide_scale_up.csv"))
}
# 2. Clean Data for Analysis ----
#
{
# Ensure 'group_num' exists
if (!"group_num" %in% colnames(matched_data)) {
matched_data[, group_num := as.integer(factor(randomized_group))]
}
matched_data[, randomized_group := NULL]  # Remove 'randomized_group' column
# Filter data
matched_data <- matched_data[decile_within_taxregion_pay != 10 | is.na(decile_within_taxregion_pay)]
# Create treatment-related variables
matched_data[, `:=`(
basic = fcase(group_num == 2, 1, group_num == 1, 0, default = NA),
anchor = fcase(group_num == 3, 1, group_num == 1, 0, default = NA),
anchor_app = fcase(group_num == 4, 1, group_num == 1, 0, default = NA),
treated = between(group_num, 2, 4),
anchoring_interventions = fcase(between(group_num, 3, 4), 1, group_num == 1, 0, default = NA))
][,
group := fcase(
basic == 1, "Reminder",
anchor == 1, "Anchor",
anchor_app == 1, "Anchor + App",
default = "Control")]
# Calculate deviations and Winsorize
matched_data[, `:=`(
deviation_anchor = (tot_payments_2024_4 - round(taxregion_mean_monthly_tot_paid)) / round(taxregion_mean_monthly_tot_paid),
deviation_anchor_file = (sum_filing_2024_4 - round(taxregion_mean_monthly_tot_paid)) / round(taxregion_mean_monthly_tot_paid))
][,
`:=`(
deviation_anchor_w = Winsorize(deviation_anchor, probs = c(0.01, 0.99)),
deviation_anchor_file_w = Winsorize(deviation_anchor_file, probs = c(0.01, 0.99)),
below_median = decile_within_taxregion_pay < 5)]
}
{
matched_data <- fread(file.path(fin_data, "Experiment/matched_data_wide_scale_up.csv"))
}
# 2. Clean Data for Analysis ----
#
{
# Ensure 'group_num' exists
if (!"group_num" %in% colnames(matched_data)) {
matched_data[, group_num := as.integer(factor(randomized_group))]
}
matched_data[, randomized_group := NULL]  # Remove 'randomized_group' column
# Filter data
matched_data <- matched_data[decile_within_taxregion_pay != 10 | is.na(decile_within_taxregion_pay)]
# Create treatment-related variables
matched_data[, `:=`(
basic = fcase(group_num == 2, 1, group_num == 1, 0, default = NA),
anchor = fcase(group_num == 3, 1, group_num == 1, 0, default = NA),
anchor_app = fcase(group_num == 4, 1, group_num == 1, 0, default = NA),
treated = between(group_num, 2, 4),
anchoring_interventions = fcase(between(group_num, 3, 4), 1, group_num == 1, 0, default = NA))
][,
group := fcase(
basic == 1, "Reminder",
anchor == 1, "Anchor",
anchor_app == 1, "Anchor + App",
default = "Control")]
# Calculate deviations and Winsorize
matched_data[, `:=`(
deviation_anchor = (tot_payments_2024_4 - round(taxregion_mean_monthly_tot_paid)) / round(taxregion_mean_monthly_tot_paid),
deviation_anchor_file = (sum_filing_2024_4 - round(taxregion_mean_monthly_tot_paid)) / round(taxregion_mean_monthly_tot_paid))
][,
`:=`(
deviation_anchor_w = Winsorize(deviation_anchor, probs = c(0.01, 0.99)),
deviation_anchor_file_w = Winsorize(deviation_anchor_file, probs = c(0.01, 0.99)),
below_median = decile_within_taxregion_pay < 5)]
}
{
any = copy(matched_data)[group != "Control"]
any[, group := "Any Treatment"]
data_balance = rbind(matched_data, any)
data_balance[, capital_city := grepl("Nairobi", station_name)]
compute_stats <- function(data, group_col, value_cols) {
# Calculate means and standard errors
means <- data[, lapply(.SD, function(x) mean(x, na.rm = TRUE)), by = group_col, .SDcols = value_cols]
ses <- data[, lapply(.SD, function(x) sd(x, na.rm = TRUE) / sqrt(.N)), by = group_col, .SDcols = value_cols]
# Rename columns
setnames(means, old = value_cols, new = paste0(value_cols, "_mean"))
setnames(ses, old = value_cols, new = paste0(value_cols, "_se"))
# Merge the two datasets
stats <- merge(means, ses, by = group_col)
# Reorder columns to alternate _mean and _se
mean_cols <- paste0(value_cols, "_mean")
se_cols <- paste0(value_cols, "_se")
ordered_cols <- c(group_col, as.vector(rbind(mean_cols, se_cols)))
stats <- stats[, ..ordered_cols]
return(stats)
}
# Compute statistics for the whole sample
value_cols <- c("taxpayer_mean_monthly_tot_paid", "zero_filer_2023",
"months_since_registration", "tot_obligation_began_2023",
"n_files")
whole_sample_stats <- compute_stats(data_balance, "group", value_cols)
# Segment data based on the median value of avg_tot_paid
below_median_data <- data_balance[below_median == TRUE]
above_median_data <- data_balance[below_median == FALSE]
# Compute statistics for below median
below_median_stats <- compute_stats(below_median_data, "group", value_cols)
# Compute statistics for above median
above_median_stats <- compute_stats(above_median_data, "group", value_cols)
# Format the statistics with mean and standard error in parentheses
format_stats <- function(stats, data) {
dt = copy(stats)
for (col in value_cols) {
mean_col <- paste0(col, "_mean")
se_col <- paste0(col, "_se")
dt[,
(mean_col) := round(get(mean_col), 3)
][,
(se_col) := paste0("[", round(get(se_col), 3), "]")
]
}
# Reshape the dt
long_data <- melt(dt, id.vars = "group", variable.name = "variable", value.name = "value")
# Cast the data to wide format
wide_data <- dcast(long_data, variable ~ group, value.var = "value")
# Conver to data.table
setDT(wide_data)
# Reorder columns
wide_data = wide_data[, c("variable", "Control", "Any Treatment", "Anchor", "Reminder")]
# Adding the number of observations row
obs_row <- data.table(
variable = "Observations",
Control = c(format(nrow(data[group == "Control"]), big.mark = ",")),
`Any Treatment` = c(format(nrow(data[group == "Any Treatment"]), big.mark = ",")),
Anchor = c(format(nrow(data[group == "Anchor"]), big.mark = ",")),
Reminder = c(format(nrow(data[group == "Reminder"]), big.mark = ","))
)
# Add the observation row to the data
wide_data <- rbind(wide_data, obs_row, fill = TRUE)
return(wide_data)
}
# Apply formatting
formatted_whole_sample <- format_stats(whole_sample_stats, data_balance)
formatted_below_median <- format_stats(below_median_stats, below_median_data)
formatted_above_median <- format_stats(above_median_stats, above_median_data)
# Define a function to compute differences and significance levels for all value columns
compute_differences <- function(stats, value_cols, data) {
diff_list <- list()
for (col in value_cols) {
mean_col <- paste0(col, "_mean")
se_col <- paste0(col, "_se")
diffs <- stats[, .(
`Control - Any Treatment` = round(get(mean_col)[group == "Control"] - get(mean_col)[group == "Any Treatment"], 3),
`Control - Reminder` = round(get(mean_col)[group == "Control"] - get(mean_col)[group == "Reminder"], 3),
`Control - Anchor` = round(get(mean_col)[group == "Control"] - get(mean_col)[group == "Anchor"], 3),
`Reminder - Anchor` = round(get(mean_col)[group == "Reminder"] - get(mean_col)[group == "Anchor"], 3)
)]
se_diffs <- stats[, .(
`Control - Any Treatment` = sqrt(get(se_col)[group == "Control"]^2 + get(se_col)[group == "Any Treatment"]^2),
`Control - Reminder` = sqrt(get(se_col)[group == "Control"]^2 + get(se_col)[group == "Reminder"]^2),
`Control - Anchor` = sqrt(get(se_col)[group == "Control"]^2 + get(se_col)[group == "Anchor"]^2),
`Reminder - Anchor` = sqrt(get(se_col)[group == "Reminder"]^2 + get(se_col)[group == "Anchor"]^2)
)]
n_diffs <- stats[, .(
`Control - Any Treatment` = min(nrow(data[group == "Control"]), nrow(data[group == "Any Treatment"])),
`Control - Reminder` = min(nrow(data[group == "Control"]), nrow(data[group == "Reminder"])),
`Control - Anchor` = min(nrow(data[group == "Control"]), nrow(data[group == "Anchor"])),
`Reminder - Anchor` = min(nrow(data[group == "Reminder"]), nrow(data[group == "Anchor"]))
)]
p_values <- diffs / se_diffs
dt_p_values <- as.data.table(rbind(p_values, n_diffs))
# Add an ID column for reshaping
dt_p_values[, id := c("p_values", "n")]
# Reshape the data from wide to long format
long_data <- melt(dt_p_values, id.vars = "id", variable.name = "Comparison", value.name = "Value")
# Split the rows into two separate columns
reshaped_data <- dcast(long_data, Comparison ~ id, value.var = "Value")
setDT(reshaped_data)
reshaped_data[, p_values := as.numeric(p_values)] # Ensure p_values is numeric
reshaped_data[, p_values := 2 * pt(-abs(p_values), df = n - 1)]
significance <- reshaped_data[, lapply(p_values, function(p) {
if (is.na(p)) {
return("-")
} else if (p < 0.01) {
return("***")
}else if (p < 0.05) {
return("**")
} else if (p < 0.1) {
return("*")
} else {
return("")
}
})]
setDT(significance)
setnames(significance, new = names(diffs))
diffs_with_significance <- as.data.table(diffs)
diffs_with_significance[, `:=` (
`Control - Any Treatment` = paste0(diffs[, `Control - Any Treatment`], significance[, `Control - Any Treatment`]),
`Control - Reminder` = paste0(diffs[, `Control - Reminder`], significance[, `Control - Reminder`]),
`Control - Anchor` = paste0(diffs[, `Control - Anchor`], significance[, `Control - Anchor`]),
`Reminder - Anchor` = paste0(diffs[, `Reminder - Anchor`], significance[, `Reminder - Anchor`])
)]
diff_list[[col]] <- diffs_with_significance
}
diff_table <- rbindlist(diff_list, use.names = TRUE, fill = TRUE)
# Function to interleave missing rows
interleave_missing <- function(dt) {
setDT(dt)
# Create a data.table with missing values
dt_missing <- dt[1, ][, lapply(.SD, function(x) NA)]
# Replicate the missing row to match the original data.table's length
dt_missing <- dt_missing[rep(1, nrow(dt))]
# Combine the original data.table and the missing rows
dt_combined <- rbindlist(list(dt, dt_missing), use.names = TRUE)
# Create an index to interleave the rows
idx <- order(c(seq_len(nrow(dt)), seq_len(nrow(dt))))
# Reorder the combined data.table by the interleaved index
dt_interleaved <- dt_combined[idx]
# Add an additional row of missing values at the end
dt_interleaved <- rbind(dt_interleaved, dt_missing[1])
return(dt_interleaved)
}
# Apply the function to the sample data.table
diff_table <- interleave_missing(diff_table)
return(diff_table)
}
# Apply the function to compute differences with significance for all value columns
diffs_whole_sample <- compute_differences(whole_sample_stats, value_cols, data_balance)
diffs_below_median <- compute_differences(below_median_stats, value_cols, below_median_data)
diffs_above_median <- compute_differences(above_median_stats, value_cols, above_median_data)
# Compute the F-Stats
compute_f_stats <- function(data, value_cols) {
f_stats = data.table(
`variable` = c("F-Stat"),
`Control` = c(""),
`Any Treatment` = c(""),
`Anchor` = c(""),
`Reminder` = c(""),
`Control - Any Treatment` = round(fitstat(feols(data, as.formula(paste0("group != 'Control'", " ~ ", paste0(value_cols, collapse = " + "))), subset = data$group %in% c("Control", "Any Treatment")), type = "f")$f$stat, 3),
`Control - Reminder` = round(fitstat(feols(data, as.formula(paste0("group != 'Control'", " ~ ", paste0(value_cols, collapse = " + "))), subset = data$group %in% c("Control", "Reminder")), type = "f")$f$stat, 3),
`Control - Anchor`   = round(fitstat(feols(data, as.formula(paste0("group != 'Control'", " ~ ", paste0(value_cols, collapse = " + "))), subset = data$group %in% c("Control", "Anchor")), type = "f")$f$stat, 3),
`Reminder - Anchor`  = round(fitstat(feols(data, as.formula(paste0("group != 'Anchor'", " ~ ", paste0(value_cols, collapse = " + "))), subset = data$group %in% c("Anchor", "Reminder")), type = "f")$f$stat, 3)
)
return(f_stats)
}
# Compute F-Stats for the differences
f_stats_wole_sample = compute_f_stats(data_balance, value_cols)
f_stats_below_median = compute_f_stats(below_median_data, value_cols)
f_stats_above_median = compute_f_stats(above_median_data, value_cols)
# Combine formatted results and differences into one final table
final_table <- cbind(
rbindlist(list(
Whole_Sample = formatted_whole_sample,
Below_Median = formatted_below_median,
Above_Median = formatted_above_median)),
rbindlist(list(
Differences_Whole_Sample = diffs_whole_sample,
Differences_Below_Median = diffs_below_median,
Differences_Above_Median = diffs_above_median
)))
table = rbind(final_table[1:11],  f_stats_wole_sample, final_table[12:22], f_stats_below_median, final_table[23:33], f_stats_above_median)
# Output the table
kable_output <- table %>%
kable("latex", booktabs = TRUE, escape = FALSE, linesep = "", align = "lcccccccc") %>%
kable_styling(latex_options = "hold_position", full_width = FALSE)
# Convert the output to a single character vector split by newline
kable_output <- unlist(strsplit(as.character(kable_output), "\n"))
kable_output = gsub("NA", "", kable_output)
kable_output = gsub("Observations", "\\\\textit{Observations}", kable_output)
kable_output = gsub("F-Stat", "\\\\textit{F-Stat}", kable_output)
kable_output = gsub("zero_filer_2023_se|months_since_registration_se|tot_obligation_began_2023_se|n_files_se|taxpayer_mean_monthly_tot_paid_se", "", kable_output)
kable_output = gsub("zero_filer_2023_mean", "Zero Filing, 2023", kable_output)
kable_output = gsub("months_since_registration_mean", "N of Months since registration", kable_output)
kable_output = gsub("tot_obligation_began_2023_mean", "ToT Obligation began in 2023", kable_output)
kable_output = gsub("n_files_mean", "N of Filings", kable_output)
kable_output = gsub("taxpayer_mean_monthly_tot_paid_mean", "Avg ToT Paid, 2023", kable_output)
kable_output[33:34] = gsub("0|0-|\\[0\\]", "-", kable_output[33:34])
test = c(
kable_output[3],
"\\tabularnewline \\midrule \\midrule",
"& (1) & (2) & (3) & (4) & Difference & Difference & Difference & Difference\\\\",
"& Control & Any Treatment & Anchor & Reminder & (1) - (2) & (1) - (3) & (1) - (4) & (3) - (4) \\\\ \n",
"\\midrule",
"\\multicolumn{1}{l}{\\underline{\\textit{Panel A: Whole Sample}}} & & & & & & & & \\\\ \n \\addlinespace ",
kable_output[7:16],
"\\midrule",
kable_output[17:18],
"\\midrule",
"\\multicolumn{1}{l}{\\underline{\\textit{Panel A: Below Median}}} & & & & & & & & \\\\ \n \\addlinespace ",
kable_output[19:28],
"\\midrule",
kable_output[29:30],
"\\midrule",
"\\multicolumn{1}{l}{\\underline{\\textit{Panel A: Median and Above}}} & & & & & & & & \\\\ \n \\addlinespace ",
kable_output[31:40],
"\\midrule",
kable_output[41:44]
)
write_lines(test, file.path(table_output, "Scale_up/balance.tex"))
}
test
matched_data <- fread(file.path(fin_data, "Experiment/matched_data_wide_scale_up.csv"))
View(matched_data)
fin_data
# Ensure 'group_num' exists
if (!"group_num" %in% colnames(matched_data)) {
matched_data[, group_num := as.integer(factor(randomized_group))]
}
matched_data[, randomized_group := NULL]  # Remove 'randomized_group' column
# Filter data
matched_data <- matched_data[decile_within_taxregion_pay != 10 | is.na(decile_within_taxregion_pay)]
View(matched_data)
# Create treatment-related variables
matched_data[, `:=`(
basic = fcase(group_num == 2, 1, group_num == 1, 0, default = NA),
anchor = fcase(group_num == 3, 1, group_num == 1, 0, default = NA),
anchor_app = fcase(group_num == 4, 1, group_num == 1, 0, default = NA),
treated = between(group_num, 2, 4),
anchoring_interventions = fcase(between(group_num, 3, 4), 1, group_num == 1, 0, default = NA))
][,
group := fcase(
basic == 1, "Reminder",
anchor == 1, "Anchor",
anchor_app == 1, "Anchor + App",
default = "Control")]
# Calculate deviations and Winsorize
matched_data[, `:=`(
deviation_anchor = (tot_payments_2024_4 - round(taxregion_mean_monthly_tot_paid)) / round(taxregion_mean_monthly_tot_paid),
deviation_anchor_file = (sum_filing_2024_4 - round(taxregion_mean_monthly_tot_paid)) / round(taxregion_mean_monthly_tot_paid))
][,
`:=`(
deviation_anchor_w = Winsorize(deviation_anchor, probs = c(0.01, 0.99)),
deviation_anchor_file_w = Winsorize(deviation_anchor_file, probs = c(0.01, 0.99)),
below_median = decile_within_taxregion_pay < 5)]
View(matched_data)
any = copy(matched_data)[group != "Control"]
any[, group := "Any Treatment"]
data_balance = rbind(matched_data, any)
data_balance[, capital_city := grepl("Nairobi", station_name)]
compute_stats <- function(data, group_col, value_cols) {
# Calculate means and standard errors
means <- data[, lapply(.SD, function(x) mean(x, na.rm = TRUE)), by = group_col, .SDcols = value_cols]
ses <- data[, lapply(.SD, function(x) sd(x, na.rm = TRUE) / sqrt(.N)), by = group_col, .SDcols = value_cols]
# Rename columns
setnames(means, old = value_cols, new = paste0(value_cols, "_mean"))
setnames(ses, old = value_cols, new = paste0(value_cols, "_se"))
# Merge the two datasets
stats <- merge(means, ses, by = group_col)
# Reorder columns to alternate _mean and _se
mean_cols <- paste0(value_cols, "_mean")
se_cols <- paste0(value_cols, "_se")
ordered_cols <- c(group_col, as.vector(rbind(mean_cols, se_cols)))
stats <- stats[, ..ordered_cols]
return(stats)
}
matched_data_old <- fread("/Users/ruggerodoino/Library/CloudStorage/Dropbox/Kenya/Data/Final/Experiment/matched_data_wide_scale_up.csv")
View(matched_data)
View(matched_data_old)
summary(matched_data_old)
summary(matched_data)
matched_data_old <- fread("/Users/ruggerodoino/Library/CloudStorage/Dropbox/Kenya/Data/Final/Experiment/matched_data_wide_scale_up.csv")
library(data.table)
matched_data_old <- fread("/Users/ruggerodoino/Library/CloudStorage/Dropbox/Kenya/Data/Final/Experiment/matched_data_wide_scale_up.csv")
summary(matcheda_data_old)
summary(matched_data_old)
3,932 + 6,554
3932 + 6554
